#!/usr/bin/perl

import Base;

@stack = ();
$last = "";

$base[2]  = new Base(2);
$base[10] = new Base(10);
$base[16] = new Base(16);
$mode     = 10; # base utilisee
$digits   = 1;  # minimum de digits
$padding  = " ";

# Nombre de bits pour encoder les valeurs
# par defaut : "" == infinie

&show_stack();
while (<>) {
   chomp;
   &parse($_);
   &show_stack();
}



sub parse {
   $_ = shift;

   if (/^\s*$/) {
      if (scalar(@stack)) {
         push @stack, $stack[$#stack];
      }
   }

   # - + / % *
   elsif (/^[-+\/%*]$/) {
      if (scalar(@stack) >= 2) {
         my $a = pop @stack;
         my $b = pop @stack;
         push @stack, eval("$b $_ $a");
      } else {
         print "error: missing operand\n";
      }
   }

   # ^ (exponentation)
   elsif (/^\^$/) {
      if (scalar(@stack) >= 2) {
         my $a = pop @stack;
         my $b = pop @stack;
         push @stack, ($b ** $a);
      } else {
         print "error: missing operand\n";
      }
   }

   # sqrt, sq (root square)
   elsif (/^sq(rt)?$/i) {
      if (scalar(@stack) >= 1) {
         my $a = pop @stack;
         push @stack, sqrt($a);
      } else {
         print "error: missing operand\n";
      }
   }

   #--- Bitwise operators
   elsif (/^and$/) {
      if (scalar(@stack) >= 2) {
         my $a = pop @stack;
         my $b = pop @stack;
         push @stack, eval("$b & $a");
      } else {
         print "error: missing operand\n";
      }
   }

   elsif (/^or$/) {
      if (scalar(@stack) >= 2) {
         my $a = pop @stack;
         my $b = pop @stack;
         push @stack, eval("$b | $a");
      } else {
         print "error: missing operand\n";
      }
   }

   elsif (/^xor$/) {
      if (scalar(@stack) >= 2) {
         my $a = pop @stack;
         my $b = pop @stack;
         push @stack, eval("$b ^ $a");
      } else {
         print "error: missing operand\n";
      }
   }

   elsif (/^not$/) {
      if (scalar(@stack) >= 1) {
         my $a = pop @stack;
         my $digits_mask = (2 ** $digits) - 1;
         my $ret = ~$a & $digits_mask;
         push @stack, $ret;
      } else {
         print "error: missing operand\n";
      }
   }

   elsif (/^(>>|<<)$/) {
      if (scalar(@stack) >= 2) {
         my $a = pop @stack;
         my $b = pop @stack;
         push @stack, eval("$b $1 $a");
      } else {
         print "error: missing operand\n";
      }
   }

   #--- Stack ---
   elsif (/^[r]$/i) { #rot
      if (scalar(@stack) >= 2) {
         my $a = shift @stack;
         push @stack, $a;
      }
   }

   elsif (/^[s]$/i) { #swap
      if (scalar(@stack) >= 2) {
         my $b = pop @stack;
         my $a = pop @stack;
         push @stack, $b;
         push @stack, $a;
      }
   }

   elsif (/^[d]$/i) { #delete
      pop @stack;
   }

   elsif (/^[c]$/i) { #clear screen
      @stack = ();
   }

   # ---
   # Modes
   # ---

   elsif (/^[b]$/i) { # binary mode
      if ($mode == 2) {
         $mode = 10;
      }
      else {
         $mode = 2;
      }
   }

   elsif (/^[x]$/i) { # hex mode
      if ($mode == 16) {
         $mode = 10;
      }
      else {
         $mode = 16;
      }
   }

   # padding
   elsif (/^pad/i) {
      ($padding) = $_ =~ m/pad\s*(.)/;
      if ($padding eq "") {
         $padding = " ";
      }
      print "pad with '$padding'\n";
   }

   # digits to display
   elsif (/^show\s*(\d+)/i) {
      $digits = $1;
   }

   elsif (/^show/i) {
      $digits = 1;
   }


   # ---
   # Misc.
   # ---

   elsif (/^[?h]$/i) { #help
      &show_help();
   }

   elsif (/^[q]$/i) { #quit
      last;
   }

   else { # new number on stack
      my $n;
      if (/^0x/) {
         $n = $base[16]->from(lc $_);
      } elsif (/^0b/) {
         $n = $base[2]->from(lc $_);
      } else {
         $n = $base[$mode]->from(lc $_);
      }
      if ($n eq "NaN") {
         print "NaN";
      } else {
         push @stack, $n;
      }
   }

}


sub show_stack {
   my $id, $ret, $maxlen = 0;

   print "\n";
   if ($mode != 10) {
      print "BASE: $mode\n";
   }

   $id = scalar(@stack);

   #---
   # 1- get max string length
   #---

   foreach my $num (@stack) {
      $ret = $base[$mode]->to($num);
      if (length($ret) > $maxlen) {
         $maxlen = length($ret);
      }
   }

   if ($maxlen < $digits) {
      $maxlen = $digits;
   }

   #---
   # 2- display numbers
   #---

   foreach my $num (@stack) {
      $ret = $base[$mode]->to($num);
      while (length ($ret) < $maxlen) {
         $ret = "#" . $ret;
      }

      if ($mode == 2 || $mode == 16) {
         $ret = reverse($ret);
         $ret =~ s/(....)/$1 /g;
         $ret = reverse($ret);
         $ret =~ s/^ *//;
         $ret =~ s/#/$padding/g;
         printf "%2d: %s (%d)\n", $id, $ret, $num;
      } else {
         $ret =~ s/#/$padding/g;
         printf "%2d: %s\n", $id, $ret;
      }

      $id--;
   }

   print "> ";
}


sub show_help {
   print "+ - * / % ^ sq(rt)\n";
   print "and or xor not <<n >>n\n";
   print "[?h]elp [q]uit [d]elete [c]lear [s]wap [r]otate\n";
   print "he[x] [b]inary\n";
   print "pad c: pad with c\n";
   print "show n: display n digits";
}



#--
package Base;

sub new {
   my $self = {};
   shift;

   my $base = shift;
   my @nums = (0..9,'a'..'f')[0..$base-1];
   my $index = 0;
   my %nums = map {$_,$index++} @nums;
   my $size = 8;

   $self->{base} = $base;
   $self->{bnums} = \@nums;
   $self->{nums} = \%nums;

   bless($self);
   return $self;
}

# conversion 10 -> $base
sub to {
   my $self = shift;
   my $number = shift;
   my $sign = "";
   my $ret = "";

   if ($number =~ s/^-//) {
      $sign = "-";
   }

   return "NaN"
      if ($number =~ m/[^\d\.]/);

   if ($self->{base} == 10) {
      return $sign . $number || "0";
   }

   while ($number > 0) {
      $ret = $self->{bnums}[$number % $self->{base}] . $ret;
      $number = int($number / $self->{base});
   }

   return $sign . $ret || "0";
}

# conversion $base-> 10
sub from {
   my $self = shift;
   my $number = shift;
   my $sign = "";
   my $ret = 0;

   if ($number =~ s/^-//) {
      $sign = "-";
   }

   if ($self->{base} == 10) {
      if ($number =~ m/[^\d\.]/) {
         return "NaN";
      }
      return $sign . $number;
   }
   elsif ($self->{base} == 2) {
      $number =~ s/^0b//;
   }
   elsif ($self->{base} == 16) {
      $number =~ s/^0x//;
   }

   for (split //, $number) {
      $ret *= $self->{base};
      if (!exists $self->{nums}{$_}) {
         return "NaN";
      }
      $ret += $self->{nums}{$_};
   }

   return $sign . $ret;
}

1;
